/*package whatever //do not write package name here */

import java.io.*;
import java.util.Scanner;
class GFG {
	public static void main (String[] args) {
		llnode head = takeInput();
		print(head);
		
		llnode newHead1 = insert(head,20,0);
		print(newHead1);
		
		
		llnode newHead2 = insert(head,40,3);
		print(newHead2);
		
		
		llnode newHead3 = insert(head,90,6);
		print(newHead3);
		
	}
	static class llnode{
	    int data;
	    llnode next;
	    
	    llnode(int data){
	        this.data=data;
	    }
	}
	public static llnode takeInput(){
	    Scanner sc = new Scanner(System.in);
	    int data = sc.nextInt();
	    llnode head = null;
	    llnode tail = null;
	    while(data!=0){
	        llnode newNode = new llnode(data);
	        if(head==null){
	        head = newNode;
	    }else{
	        tail.next = newNode;
	    }
	    tail = newNode;
	    data = sc.nextInt();
	}
	return head;
}
public static void print(llnode head){
    llnode temp = head;
    while(temp!=null){
        System.out.print(temp.data+"->");
        temp= temp.next;
    }
    System.out.println();
}
/*
public static llnode getMiddleElement(llnode head){
    llnode fast = head;
    llnode slow = head;
    while(fast!=null && fast.next!=null){
        slow = slow.next;
        fast = fast.next.next; 
    }
    assert slow!=null;
    slow.next = null;
    return slow;
}

public static llnode reverseInKgrp(llnode head,int k){
    if(head==null ||  head.next==null){
        return head;
    }
    int i=0;
    llnode prev= null;
    llnode curr= head;
    while(i<k && curr!=null){
        llnode next = curr.next;
        curr.next= prev;
        prev= curr;
        curr= next;
        i++;
    }
        head.next= reverseInKgrp(curr,3);
    return prev;
}
*/
public static llnode insert(llnode head,int el,int ind){
    int n = getLength(head);
    if(ind>=n){
        return head;
    }
    
    if(ind==0){
        llnode newNode = new llnode(el);
        newNode.next = head;
        head = newNode;
    
        return head;
    }
    
    
    if(ind==3){
        llnode newNode = new llnode(el);
        llnode prevNode = head;
        int i=0;
        while(i<ind-1){
            prevNode = prevNode.next;
            i++;
        }
        llnode nextNode = prevNode.next;
        prevNode.next = newNode;
        newNode.next = nextNode;
    
    return head;
    }
    
    if(ind==6){
        llnode newNode  = new llnode(el);
    
        if(head==null){
            head= newNode;
            return head;
        }
        llnode currNode= head;
        while(currNode.next!=null){
            currNode = currNode.next;
        }
        currNode.next = newNode;
        newNode.next = null;
    }
    return head;
    
}
 public static int getLength(llnode head){
     llnode temp = head;
     int count =0;
     while(temp!=null){
         count++;
         temp= temp.next;
         
     }
     return count;
 }

}
